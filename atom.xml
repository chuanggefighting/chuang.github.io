<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>闯哥要去流浪了</title>
  
  <subtitle>我知道你一定会来，所以我一直在等</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://chuanggefighting.github.io/"/>
  <updated>2019-03-06T14:24:00.422Z</updated>
  <id>https://chuanggefighting.github.io/</id>
  
  <author>
    <name>chuanggefighting</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CSS 预处理工具</title>
    <link href="https://chuanggefighting.github.io/2019/03/01/4-css%E9%A2%84%E5%A4%84%E7%90%86/"/>
    <id>https://chuanggefighting.github.io/2019/03/01/4-css预处理/</id>
    <published>2019-03-01T15:24:50.000Z</published>
    <updated>2019-03-06T14:24:00.422Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Mar 06 2019 22:26:54 GMT+0800 (中国标准时间) --><html><head></head><body><h1 id="一、出现需求"><a href="#一、出现需求" class="headerlink" title="一、出现需求"></a>一、出现需求</h1><div style="text-indent:2em">css只能用来写样式但不能实现真正的编程，而css预处理器为CSS增加了编程特性，无需考虑浏览器的兼容问题，让CSS更加简洁，适应性和可读性更好，可以进行模块化开发，节省开发时间而且方便后期维护等。目前最主流的三个预处理器有 Less、Sass 和 Stylus</div><div style="text-indent:2em">最早也是最成熟的是Sass，它使用 以严格的缩进式语法规则书写而不带 {} 和 ; 的缩排语法，后来为了方便习惯css的开发人员而升级为Scss，Scss 兼容Sass语法而且书写规则类似css。Less受Sass的影响较大，更容易上手但编程功能不够，Stylus主要用来给Node项目进行css预处理支持</div><h1 id="二、Scss-基础语法"><a href="#二、Scss-基础语法" class="headerlink" title="二、Scss 基础语法"></a>二、Scss 基础语法</h1><h2 id="引用-import"><a href="#引用-import" class="headerlink" title="引用 @import"></a>引用 <code>@import</code></h2><figure class="highlight scss"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 直接引用文件</span></span><br><span class="line">@<span class="keyword">import</span> <span class="string">"index.css"</span>, <span class="string">"index2.scss"</span>;   <span class="comment">// 导入多个文件</span></span><br><span class="line">@<span class="keyword">import</span> <span class="string">"http://foo.com/bar"</span>;</span><br><span class="line">@<span class="keyword">import</span> url(foo);</span><br><span class="line">@<span class="keyword">import</span> <span class="string">"_index.scss"</span>;  <span class="comment">// 避免引入文件被编译</span></span><br><span class="line">@<span class="keyword">import</span> <span class="string">"colors"</span>;       <span class="comment">// 导入 _colors.scss 且不能同时存在 colors.scss</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 变量插值</span></span><br><span class="line"><span class="variable">$device</span>: mobile;</span><br><span class="line">@<span class="keyword">import</span> url(styles.#{<span class="variable">$device</span>}<span class="selector-class">.css</span>);</span><br></pre></td></tr></tbody></table></figure><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><figure class="highlight scss"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  单行注释(不会被编译到css文件中);</span></span><br><span class="line"><span class="comment">/*  多行注释(在非压缩模式下会被编译到css文件中)  */</span></span><br><span class="line"><span class="comment">/*! 重要注释(各种压缩模式下都会被编译到css文件中)  */</span></span><br></pre></td></tr></tbody></table></figure><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><ul><li><strong>变量名</strong>：以$开头,可用作选择器/属性(值)/字符串;</li><li><strong>变量值</strong>：数字、字符串(可不带引号)、布尔值、空值(null)、List(列表，类似数组)、Map(映射，类似对象)</li><li><strong>注意</strong>：当使用 #{} 时,带引号的字符串将被编译为 不带引号的字符串(为了便于使用);</li></ul><figure class="highlight scss"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$width</span>: <span class="number">1px</span>;             <span class="comment">//全局变量(定义在所有选择器外)</span></span><br><span class="line"><span class="variable">$width2</span>: <span class="number">2px</span>;    </span><br><span class="line"><span class="variable">$width2</span>: <span class="number">3px</span> !default;   <span class="comment">//默认变量(无值时起作用)</span></span><br><span class="line"><span class="variable">$pos</span>: bottom;</span><br><span class="line"><span class="selector-class">.aa</span> {</span><br><span class="line">    <span class="variable">$fs</span>: <span class="number">14px</span>;        <span class="comment">//局部变量(定义在选择器内)</span></span><br><span class="line">    <span class="variable">$lh</span>: <span class="number">1.5</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">width</span>: <span class="variable">$width</span>;                  <span class="comment">//常规使用($var)</span></span><br><span class="line">    <span class="attribute">border</span>-#{<span class="variable">$pos</span>}: <span class="number">1px</span> solid red;  <span class="comment">//拼字符串(#{$var})</span></span><br><span class="line">    <span class="attribute">font</span>: #{<span class="variable">$fs</span>}/#{lh} sans-serif;  <span class="comment">//复杂属性值(#{$var})</span></span><br><span class="line">}</span><br><span class="line"><span class="selector-class">.bb</span> {</span><br><span class="line">    <span class="variable">$width</span>: <span class="number">3px</span> !global;           <span class="comment">//覆盖全局变量</span></span><br><span class="line">    <span class="attribute">width</span>: <span class="variable">$width</span> + <span class="variable">$width2</span>;       <span class="comment">//用于计算($var + $var)</span></span><br><span class="line">}</span><br><span class="line">@<span class="keyword">mixin</span> link-style(<span class="variable">$sel</span>) {</span><br><span class="line">    <span class="selector-tag">li</span> #{<span class="variable">$sel</span>} {                  <span class="comment">//作为选择器(#{$var})</span></span><br><span class="line">        <span class="attribute">color</span>: red;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line">@<span class="keyword">include</span> link-style(<span class="string">"a"</span>);</span><br></pre></td></tr></tbody></table></figure><h2 id="嵌套"><a href="#嵌套" class="headerlink" title="嵌套"></a>嵌套</h2><figure class="highlight scss"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 选择器嵌套</span></span><br><span class="line"><span class="selector-tag">div</span> {</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">    <span class="selector-tag">p</span> {</span><br><span class="line">        <span class="attribute">color</span>: green;</span><br><span class="line">    }</span><br><span class="line">    &:hover {     <span class="comment">//使用 & 表示在嵌套中对父元素的引用</span></span><br><span class="line">        <span class="attribute">color</span>: blue;</span><br><span class="line">    }</span><br><span class="line">    @at-root .d {  <span class="comment">//选择器嵌套多层后让某个选择器跳出根元素</span></span><br><span class="line">        <span class="attribute">color</span>: green;</span><br><span class="line">    }</span><br><span class="line">} </span><br><span class="line"><span class="comment">// 属性嵌套</span></span><br><span class="line"><span class="selector-class">.div</span> {</span><br><span class="line">    <span class="attribute">border</span>: {   //嵌套属性后须写冒号</span><br><span class="line">      style: solid;</span><br><span class="line">      <span class="attribute">left</span>: {</span><br><span class="line">        width: <span class="number">4px</span>;</span><br><span class="line">        <span class="attribute">color</span>: <span class="number">#888</span>;</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="混合宏-mixin"><a href="#混合宏-mixin" class="headerlink" title="混合宏 @mixin"></a>混合宏 <code>@mixin</code></h2><ul><li>@mixin定义可重用的代码段，@include调用</li></ul><figure class="highlight scss"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 无参 </span></span><br><span class="line">@<span class="keyword">mixin</span> aa {</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">10px</span>;</span><br><span class="line">}</span><br><span class="line"><span class="selector-class">.bb</span> {</span><br><span class="line">    @<span class="keyword">include</span> aa;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 参数为数组 </span></span><br><span class="line"><span class="variable">$margin</span>: <span class="number">100px</span>;</span><br><span class="line"><span class="variable">$left</span>: <span class="number">10px</span>;</span><br><span class="line">@<span class="keyword">mixin</span> aa(<span class="variable">$left</span>, <span class="variable">$margin</span>) {</span><br><span class="line">    <span class="attribute">margin</span>: <span class="variable">$margin</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="variable">$left</span>;</span><br><span class="line">}</span><br><span class="line"><span class="selector-class">.bb</span> {</span><br><span class="line">    @<span class="keyword">include</span> aa(<span class="variable">$left</span>, <span class="variable">$margin</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 参数为对象 </span></span><br><span class="line"><span class="variable">$map</span>: (left: <span class="number">10px</span>, width: <span class="number">100px</span>);</span><br><span class="line">@<span class="keyword">mixin</span> aa(<span class="variable">$left</span>, <span class="variable">$width</span>) {</span><br><span class="line">    <span class="comment">// 接收参数为key值</span></span><br><span class="line">    <span class="attribute">left</span>: <span class="variable">$left</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="variable">$width</span>;</span><br><span class="line">}</span><br><span class="line"><span class="selector-tag">div</span> {</span><br><span class="line">    @<span class="keyword">include</span> aa(<span class="variable">$map</span>...); <span class="comment">// 传递参数为对象名+...</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 默认参数(不传参数时会用默认参数)</span></span><br><span class="line">@<span class="keyword">mixin</span> aa(<span class="variable">$left</span>: 10px) {}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不定参数 </span></span><br><span class="line">@<span class="keyword">mixin</span> box-shadow(<span class="variable">$shadows</span>...) {</span><br><span class="line">    <span class="comment">//不定参数,用...</span></span><br><span class="line">    -moz-<span class="attribute">box-shadow</span>: <span class="variable">$shadows</span>;</span><br><span class="line">    -webkit-<span class="attribute">box-shadow</span>: <span class="variable">$shadows</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="variable">$shadows</span>;</span><br><span class="line">}</span><br><span class="line"><span class="selector-class">.shadows</span> {</span><br><span class="line">    @<span class="keyword">include</span> box-shadow(<span class="number">2px</span> 2px 2px <span class="number">#eee</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 浏览器前缀设置 </span></span><br><span class="line">@<span class="keyword">mixin</span> rounded(<span class="variable">$vert</span>, <span class="variable">$horz</span>, <span class="variable">$radius</span>: 10px) {</span><br><span class="line">    <span class="attribute">border</span>-#{<span class="variable">$vert</span>}-#{<span class="variable">$horz</span>}-radius: <span class="variable">$radius</span>;</span><br><span class="line">    -moz-<span class="attribute">border-radius</span>-#{<span class="variable">$vert</span>}#{<span class="variable">$horz</span>}: <span class="variable">$radius</span>;</span><br><span class="line">    -webkit-<span class="attribute">border</span>-#{<span class="variable">$vert</span>}-#{<span class="variable">$horz</span>}-radius: <span class="variable">$radius</span>;</span><br><span class="line">}</span><br><span class="line"><span class="selector-id">#navbar</span> <span class="selector-tag">li</span> {</span><br><span class="line">    @<span class="keyword">include</span> rounded(top, left);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#footer</span> {</span><br><span class="line">    @<span class="keyword">include</span> rounded(top, left, 5px);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="继承-extend"><a href="#继承-extend" class="headerlink" title="继承 @extend"></a>继承 <code>@extend</code></h2><ul><li>不管是否调用，基类的样式都将会出现在编译出来的 CSS 代码中</li></ul><figure class="highlight scss"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.btn</span> {</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">5px</span> <span class="number">15px</span>;</span><br><span class="line">}</span><br><span class="line"><span class="selector-class">.btn-bor</span> {</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">}</span><br><span class="line"><span class="selector-class">.btn-red</span> {</span><br><span class="line">  @<span class="keyword">extend</span> .btn; <span class="comment">//多个扩展</span></span><br><span class="line">  @<span class="keyword">extend</span> .btn-bor !optional; </span><br><span class="line">  <span class="comment">// 用optional直接跳过空样式,防止元素不存在而导致报错</span></span><br><span class="line">  <span class="attribute">border-color</span>: red;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.hoverlink</span> {</span><br><span class="line">  @<span class="keyword">extend</span> a:hover;   <span class="comment">//@extend可扩展任何选择器</span></span><br><span class="line">}</span><br><span class="line"><span class="selector-tag">a</span>:hover {</span><br><span class="line">  <span class="attribute">text-decoration</span>: underline;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 配合占位选择器(%扩展单一选择器,编译后不在css)使用</span></span><br><span class="line"><span class="selector-class">.container</span> <span class="selector-tag">div</span>%box {</span><br><span class="line">  -webkit-<span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">  -moz-<span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">}</span><br><span class="line"><span class="selector-class">.bor-box</span> {</span><br><span class="line">  @<span class="keyword">extend</span> %box; <span class="comment">//此时才会编译产生</span></span><br><span class="line">} </span><br><span class="line"><span class="comment">//编译为 .container div.bor-box { }</span></span><br></pre></td></tr></tbody></table></figure><h2 id="占位符-placeholder"><a href="#占位符-placeholder" class="headerlink" title="占位符 %placeholder"></a>占位符 <code>%placeholder</code></h2><ul><li>一个独立定义的声明块，不调用时不会编译生成 CSS</li></ul><figure class="highlight scss"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">%mt{</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">5px</span>;  </span><br><span class="line">}</span><br><span class="line"><span class="selector-class">.block</span> {</span><br><span class="line">    @<span class="keyword">extend</span> %mt;</span><br><span class="line">    <span class="selector-tag">span</span> {</span><br><span class="line">        <span class="attribute">display</span>:block;</span><br><span class="line">        @<span class="keyword">extend</span> %mt;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="selector-class">.header</span> {</span><br><span class="line">    <span class="attribute">color</span>: orange;</span><br><span class="line">    @<span class="keyword">extend</span> %mt;</span><br><span class="line">    <span class="selector-tag">span</span> {</span><br><span class="line">        <span class="attribute">display</span>:block;</span><br><span class="line">        @<span class="keyword">extend</span> %mt;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="三、Scss-进阶语法"><a href="#三、Scss-进阶语法" class="headerlink" title="三、Scss 进阶语法"></a>三、Scss 进阶语法</h1><h2 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h2><ul><li>可单独使用或结合 @else (if) 使用</li><li>使用 not/or/and 分别表示非/或/与，如 @if not($var)</li><li>使用 !=/== 分别表示(不)等于，如 @if $a !=0</li></ul><figure class="highlight scss"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">mixin</span> blockOrHidden(<span class="variable">$boolean</span>:true) {</span><br><span class="line">    @<span class="keyword">if</span> <span class="variable">$boolean</span> {</span><br><span class="line">      @<span class="keyword">debug</span> <span class="string">"$boolean is #{$boolean}"</span>;</span><br><span class="line">      <span class="attribute">display</span>: block; <span class="comment">//参数为真，显示</span></span><br><span class="line">    }</span><br><span class="line">    @<span class="keyword">else</span> {</span><br><span class="line">      @<span class="keyword">debug</span> <span class="string">"$boolean is #{$boolean}"</span>;</span><br><span class="line">      <span class="attribute">display</span>: none; <span class="comment">//参数为假，不显示</span></span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="selector-class">.block</span> {</span><br><span class="line">    @<span class="keyword">include</span> blockOrHidden;</span><br><span class="line">}</span><br><span class="line"><span class="selector-class">.hidden</span> {</span><br><span class="line">    @<span class="keyword">include</span> blockOrHidden(false);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="循环-list-map"><a href="#循环-list-map" class="headerlink" title="循环 list/map"></a>循环 list/map</h2><figure class="highlight scss"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// list(用空格/逗号隔开项):</span></span><br><span class="line"><span class="variable">$name</span>: <span class="string">"a"</span>, <span class="string">"b"</span>;</span><br><span class="line"><span class="variable">$px</span>: <span class="number">5px</span> <span class="number">10px</span> <span class="number">15px</span> <span class="number">20px</span>; </span><br><span class="line"><span class="variable">$sel2</span>: (sel1: <span class="string">"span"</span>, sel2: <span class="string">"div"</span>) </span><br><span class="line"></span><br><span class="line">// Map</span><br><span class="line"><span class="variable">$map</span>: (key1: <span class="number">1</span>, key2: <span class="number">2</span>, key3: <span class="number">3</span>);</span><br><span class="line">  </span><br><span class="line"><span class="comment">// for循环</span></span><br><span class="line">@<span class="keyword">for</span> <span class="variable">$var</span> from <start> through <end> // 包含end值</span><br><span class="line">@<span class="keyword">for</span> <span class="variable">$var</span> from <start> to <end>      // 不包含end值</span><br><span class="line">  </span><br><span class="line">// each循环:</span><br><span class="line">@<span class="keyword">each</span> <span class="variable">$var</span> in list/map</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// while</span><br><span class="line"><span class="variable">$i</span>: 2;</span><br><span class="line">@<span class="keyword">while</span> <span class="variable">$i</span>><span class="number">0</span> {   <span class="comment">// 条件为 true 就会执行</span></span><br><span class="line">    <span class="selector-class">.color</span>#{<span class="variable">$i</span>} {</span><br><span class="line">      <span class="attribute">color</span>: <span class="number">#222</span> * <span class="variable">$i</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="variable">$i</span>:<span class="variable">$i</span> - <span class="number">1</span>;     <span class="comment">// 不能写成 $i:$i-1，因为会被当成字符串</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// for循环 </span></span><br><span class="line"><span class="variable">$arr</span>: ( (theme: dark, size: <span class="number">40px</span>), </span><br><span class="line">    (theme: light, size: <span class="number">32px</span>)</span><br><span class="line">);</span><br><span class="line">@<span class="keyword">for</span> <span class="variable">$i</span> from 1 through length(<span class="variable">$arr</span>) {</span><br><span class="line">    <span class="variable">$item</span>: nth(<span class="variable">$arr</span>, <span class="variable">$i</span>);           <span class="comment">// 获取数组中第i项的值</span></span><br><span class="line">    .#{<span class="selector-tag">map</span>-get(<span class="variable">$item</span>, theme)} {</span><br><span class="line">      <span class="attribute">width</span>: map-get(<span class="variable">$item</span>, size);  <span class="comment">// 获取指定键值</span></span><br><span class="line">      <span class="attribute">height</span>: map-get(<span class="variable">$item</span>, size);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// each循环</span></span><br><span class="line"><span class="variable">$margins</span>: <span class="number">5px</span> <span class="number">10px</span>, <span class="number">15px</span> <span class="number">20px</span>;    <span class="comment">// 两个项</span></span><br><span class="line"><span class="selector-tag">div</span> {</span><br><span class="line">    <span class="attribute">margin</span>: nth(<span class="variable">$margins</span>, <span class="number">1</span>) nth(<span class="variable">$margins</span>, <span class="number">2</span>);</span><br><span class="line">    <span class="attribute">padding</span>: nth(<span class="variable">$margins</span>, <span class="number">1</span>);</span><br><span class="line">}</span><br><span class="line"><span class="variable">$sel2</span>: (sel1: <span class="string">"span"</span>, sel2: <span class="string">"div"</span>);  <span class="comment">// Map形式</span></span><br><span class="line">@<span class="keyword">each</span> <span class="variable">$s</span> in <span class="variable">$sel2</span> {</span><br><span class="line">    .#{<span class="variable">$s</span>} {</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">20px</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="variable">$headers</span>: (h1:<span class="number">2em</span>, h2:<span class="number">1.5em</span>, h3:<span class="number">1.2em</span>);</span><br><span class="line">@<span class="keyword">each</span> <span class="variable">$header</span>, <span class="variable">$size</span> in <span class="variable">$headers</span> {</span><br><span class="line">    #{<span class="variable">$header</span>} {</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="variable">$size</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="函数和运算"><a href="#函数和运算" class="headerlink" title="函数和运算"></a>函数和运算</h2><ol><li>自定义<ul><li>@fuction 定义，@return 返回结果</li></ul></li><li>三元条件<ul><li>if($condition, $if-true, $if-false)：条件成立时返回值1，否则返回值2</li></ul></li><li>颜色<ul><li>rgb/rgba()：创建颜色</li><li>alpha/opacity($color)：获取颜色透明度值</li><li>rgba($color, $alpha)：改变颜色透明度值</li><li>mix($color1, $color2, [$weight])：混合颜色</li><li>lighten/darken($color, $percent)：变浅/加深</li></ul></li><li>数字<ul><li>random()：随机数</li><li>min/max($nums…)：最小值/最大值</li><li>floor/ceil($value)：向下/上整数</li><li>percentage/abs/round($val)：百分比值/绝对值/取整</li></ul></li><li>字符串<ul><li>quote/unquote($string)：给字符串添加/删除引号</li><li>to-upper/lower-case()：字符串大小写字母转换</li></ul></li><li>List<ul><li>length($list)：获取长度</li><li>nth($list, i)：获取列表项（索引i从1开始）</li><li>append($px, 11px)：添加新值</li><li>join($list1, $list2)：列表合并</li><li>zip($lists…)：合并多个表为多维列表<ul><li>index($list, $value)：返回该值在列表中的索引</li></ul></li></ul></li><li>Map<ul><li>map-keys/values($map)：获取所有key/values</li><li>map-get/remove($map, key)：获取/删除指定项</li><li>map-has-key($map, key)：判断是否有key</li><li>map-merge($map1, $map2)：合并map<ul><li>keywords($args)：返回函数参数(可动态设置key和value)</li></ul></li></ul></li><li>Introspection<ul><li>type-of($value)：返回值的类型</li><li>unit($number)：返回值的单位</li><li>unitless($number)：判断该值是否带有单位</li><li>commparable($num, $num)：判断两个值是否可做加减和合并</li></ul></li></ol><figure class="highlight scss"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">@function colors(<span class="variable">$color</span>) {</span><br><span class="line">    <span class="variable">$names</span>: map-keys(<span class="variable">$social-colors</span>);</span><br><span class="line">    @<span class="keyword">if</span> not index(<span class="variable">$names</span>, <span class="variable">$color</span>) {</span><br><span class="line">        @<span class="keyword">warn</span> <span class="string">"Waring: `#{$color} is not a valid color name.`"</span>;</span><br><span class="line">    }</span><br><span class="line">    @return map-get(<span class="variable">$social-colors</span>, <span class="variable">$color</span>);</span><br><span class="line">}</span><br><span class="line"><span class="selector-class">.btn-weibo</span> {</span><br><span class="line">    <span class="attribute">color</span>: colors(weibo);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="variable">$social-colors</span>: (</span><br><span class="line">    dribble: <span class="number">#ea4c89</span>,</span><br><span class="line">    facebook: <span class="number">#3b5998</span>,</span><br><span class="line">    github: <span class="number">#171515</span>,</span><br><span class="line">    google: <span class="number">#db4437</span>,</span><br><span class="line">    twitter: <span class="number">#55acee</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">@<span class="keyword">each</span> <span class="variable">$name</span> in map-keys(<span class="variable">$social-colors</span>) {</span><br><span class="line">    <span class="selector-class">.btn-</span>#{<span class="variable">$name</span>} {</span><br><span class="line">        <span class="attribute">color</span>: colors(<span class="variable">$name</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">@<span class="keyword">for</span> <span class="variable">$i</span> from 1 through length(map-keys(<span class="variable">$social-colors</span>)) {</span><br><span class="line">    <span class="selector-class">.btn-</span>#{nth(<span class="selector-tag">map</span>-keys(<span class="variable">$social-colors</span>), <span class="variable">$i</span>)} {</span><br><span class="line">        <span class="attribute">color</span>: colors(nth(map-keys(<span class="variable">$social-colors</span>), <span class="variable">$i</span>));</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h2><figure class="highlight scss"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 类似于控制台输出信息</span></span><br><span class="line">@<span class="keyword">debug</span> <span class="string">'This is adebug'</span>;</span><br><span class="line">@<span class="keyword">warn</span> <span class="string">'Warn'</span>;</span><br><span class="line">@error <span class="string">'Error'</span>;</span><br></pre></td></tr></tbody></table></figure><!-- rebuild by neat --></body></html>]]></content>
    
    <summary type="html">
    
      Scss 的基础使用
    
    </summary>
    
      <category term="Web Skills" scheme="https://chuanggefighting.github.io/categories/Web-Skills/"/>
    
    
      <category term="Skill" scheme="https://chuanggefighting.github.io/tags/Skill/"/>
    
      <category term="CSS" scheme="https://chuanggefighting.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>前端开发常用工具</title>
    <link href="https://chuanggefighting.github.io/2019/02/20/3-web%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    <id>https://chuanggefighting.github.io/2019/02/20/3-web开发工具/</id>
    <published>2019-02-20T07:41:48.000Z</published>
    <updated>2019-03-06T14:23:55.848Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Mar 06 2019 22:26:54 GMT+0800 (中国标准时间) --><html><head></head><body><h1 id="一、构建工具"><a href="#一、构建工具" class="headerlink" title="一、构建工具"></a>一、构建工具</h1><h2 id="构建需求"><a href="#构建需求" class="headerlink" title="构建需求"></a>构建需求</h2><ol><li><p><strong>预处理</strong></p><div style="text-indent:2em">低层语言的更换或升级都因兼容性问题而面临着巨大困难，这催生了各种中间语言的预处理器，例如 通过 Babel 将 ES6 转换成可以在浏览器中运行的 js代码，通过 Sass/Less/Stylus 可以在线编程并转换成 css代码。</div></li><li><p><strong>风格与测试</strong></p><div style="text-indent:2em">在一个典型的工作流中，每次Push主分支或npm发布都应首先运行代码风格检查和单元测试。我们需要这些操作能够在合适的时候自动执行。</div></li><li><p><strong>资源压缩</strong></p><div style="text-indent:2em">在开发网站代码时，我们希望模块化地进行编码，即每个业务逻辑、通用工具或者架构元素都需要组织在单独的文件中。但是如果用户浏览网页时也载入这么多源文件则会影响页面打开速度，因此在网站发布时需要将源码合并压缩，js可能还需要模块化，CSS文件可能还需要合并、添加兼容性前缀等，这些重复性工作我们也希望写成脚本。</div></li><li><p><strong>静态资源的URL替换</strong></p><div style="text-indent:2em">该需求最复杂, 因为生产环境中的资源地址可能和开发环境中很不同，可能是由于JS合并、CSS合并，也可能是由于应用了CDN加速。我们需要在部署时更改所有HTML文件中的静态资源地址。</div></li></ol><h2 id="构建工具分类"><a href="#构建工具分类" class="headerlink" title="构建工具分类"></a>构建工具分类</h2><div style="text-indent:2em">“自动化构建”是指通过工具实现构建系统、编译和转换代码、压缩资源、部署配置等功能，优化”从源码到网页”的开发流程，这有利于提高开发效率并改善代码质量。</div><br><div style="text-indent:2em">所有的开发工具都是为了使大量低技术含量任务完成自动化从而减轻工作，它们的组合使用完全看个人选择。开发过程一般会以Node和npm为核心，然后搭配 Gulp + Bower 或者 Webpack。</div><ol><li><strong>执行通用任务</strong></li></ol><ul><li>NPM / Bower：基于NodeJS的包管理和分发工具，用来下载、安装、上传以及管理已经安装的包</li><li>Gulp / Grunt：基于NodeJS的自动化构建工具，用来自动化完成一些常见的、重复的Web开发任务，如网页自动刷新和预处理等。两者最大区别是Gulp采取流式接口。</li></ul><ol start="2"><li><strong>模块绑定</strong></li></ol><ul><li>Webpack：前端资源模块化管理和打包工具，用来配置各种模块所需要的处理方式，常见配置有scss代码预处理、ES6代码转换、模块打包的规则和地址等</li><li>Browserify：打包工具，常用于将 Node项目模块打包成浏览器支持形式</li><li>RequireJS：Js模块加载器，常用于NodeJS中加载模块</li></ul><ol start="3"><li><strong>代码分析</strong></li></ol><ul><li>ESLint / JSLint：检测工具，常用于分析代码中潜在错误。</li></ul><ol start="4"><li><strong>单元测试</strong></li></ol><ul><li>Jasmine：测试工具，常用于测试自己的代码</li></ul><h1 id="二、NPM"><a href="#二、NPM" class="headerlink" title="二、NPM"></a>二、NPM</h1><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><ul><li>从NPM服务器下载别人编写的三方包到本地使用</li><li>从NPM服务器下载并安装别人编写的命令行程序到本地使用</li><li>将自己编写的包或命令行程序上传到NPM服务器供别人使用</li></ul><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">npm -v                    <span class="comment">//查看npm版本</span></span><br><span class="line">npm list                  <span class="comment">//当前目录已安装插件</span></span><br><span class="line">npm init                  <span class="comment">//生成package.json文件</span></span><br><span class="line"></span><br><span class="line">npm i <name> -g           <span class="comment">//安装包</span></span><br><span class="line">npm uninstall <name>      <span class="comment">//卸载包</span></span><br><span class="line">npm update <name>         <span class="comment">//更新包   </span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 可添加的修饰符</span></span><br><span class="line"><span class="comment">  *     -g                 全局(不加则为本地安装)</span></span><br><span class="line"><span class="comment">  *     -S / --save        需要发布到生产环境的依赖(默认)</span></span><br><span class="line"><span class="comment">  *     -D / --save-dev    只用于开发环境的依赖</span></span><br><span class="line"><span class="comment">  *     --no-save          不写入package.json的依赖</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"></span><br><span class="line">npm run script-key        <span class="comment">// 执行package.json中 "scripts" 选项对应的js </span></span><br><span class="line">npm start                 <span class="comment">// 比较特殊</span></span><br></pre></td></tr></tbody></table></figure><h2 id="发布npm包"><a href="#发布npm包" class="headerlink" title="发布npm包"></a>发布npm包</h2><pre><code><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">cd test                 <span class="comment">// 选择目标文件夹</span></span><br><span class="line">npm init                <span class="comment">// 配置包的相关信息</span></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="number">1</span>      <span class="comment">// 编辑包 test/index.js</span></span><br><span class="line"></span><br><span class="line">npm adduser             <span class="comment">// 注册，第一次发布包</span></span><br><span class="line">npm login               <span class="comment">// 登录，非第一次发布包</span></span><br><span class="line"></span><br><span class="line">npm publish            <span class="comment">// 发布/更新包</span></span><br><span class="line">npm install 包名        <span class="comment">// npm官网搜索后验证下载</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 撤销发布的包要用force强制删除。超过24小时就不能删除了</span></span><br><span class="line">npm --force unpublish 包名</span><br></pre></td></tr></tbody></table></figure></code></pre><h1 id="三、Gulp"><a href="#三、Gulp" class="headerlink" title="三、Gulp"></a>三、Gulp</h1><h2 id="常用插件"><a href="#常用插件" class="headerlink" title="常用插件"></a>常用插件</h2><ul><li>gulp-minify-html：压缩html</li><li>gulp-minify-css：压缩css</li><li>gulp-uglify：压缩js</li><li>gulp-smushit：压缩图片</li><li>gulp-concat：文件合并</li><li>gulp-rename：重命名</li><li>gulp-babel：编译ES6</li><li>gulp-sass/less：css预处理</li><li>gulp-autoprefixer：自动添加css前缀</li><li>browser-sync：自动刷新页面(非gulp插件)</li></ul><h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><ul><li>task：创建任务</li><li>run：运行任务</li><li>watch：监听任务</li><li>src：设置需处理的文件路径(正则/数组)</li><li>dest：设置生成文件的路径，一个任务可有多个生成路径</li></ul><h2 id="设置任务"><a href="#设置任务" class="headerlink" title="设置任务"></a>设置任务</h2><ol><li><strong>服务器</strong><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>),</span><br><span class="line">    browserSync = <span class="built_in">require</span>(<span class="string">'browser-sync'</span>);</span><br><span class="line"><span class="comment">// 1.搭建静态服务器</span></span><br><span class="line">gulp.task(<span class="string">'browser-sync'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">    browserSync.init({</span><br><span class="line">        files:[<span class="string">'**'</span>],</span><br><span class="line">        server:{</span><br><span class="line">            baseDir:<span class="string">'./'</span>,             <span class="comment">// 服务器的根目录</span></span><br><span class="line">            index:<span class="string">'blink/blink.html'</span>  <span class="comment">// 默认打开的文件</span></span><br><span class="line">        },</span><br><span class="line">        port:<span class="number">8050</span>  <span class="comment">// 指定访问服务器的端口号</span></span><br><span class="line">    });</span><br><span class="line">});</span><br><span class="line"><span class="comment">// 2.使用代理（注意本地服务器必须自己搭建的）</span></span><br><span class="line">gulp.task(<span class="string">'browser-sync'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">    browserSync.init({</span><br><span class="line">        files:[<span class="string">'**'</span>],</span><br><span class="line">        proxy:<span class="string">'localhost'</span>,  <span class="comment">// 本地服务器的地址</span></span><br><span class="line">        port:<span class="number">8080</span>           <span class="comment">// 访问的端口号</span></span><br><span class="line">    });</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure></li></ol><ol start="2"><li><strong>默认任务</strong><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">gulp.task(<span class="string">'default'</span>,[<span class="string">'serve'</span>]);  </span><br><span class="line">gulp.task(<span class="string">'server'</span>,[<span class="string">'sass'</span>,<span class="string">'mihtml'</span>,<span class="string">'minijs'</span>],<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">    bs.init({</span><br><span class="line">        open:<span class="string">'external'</span>,</span><br><span class="line">        server:<span class="string">'./build'</span>  <span class="comment">//服务根目录</span></span><br><span class="line">    })</span><br><span class="line">    <span class="comment">// 监听html</span></span><br><span class="line">    gulp.watch(<span class="string">'./html/*.html'</span>,[<span class="string">'mihtml'</span>])</span><br><span class="line">    gulp.watch(<span class="string">'./build/html/*.html'</span>).on(<span class="string">'change'</span>,reload)</span><br><span class="line">}) </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'default'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">    gulp.run(<span class="string">'lint'</span>, <span class="string">'sass'</span>, <span class="string">'scripts'</span>);</span><br><span class="line">      <span class="comment">// 监听sass文件变化</span></span><br><span class="line">    gulp.watch(<span class="string">'src/sass/*.sass'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">        gulp.run(<span class="string">'lint'</span>, <span class="string">'sass'</span>, <span class="string">'scripts'</span>);</span><br><span class="line">    });</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure></li></ol><h2 id="基础使用"><a href="#基础使用" class="headerlink" title="基础使用"></a>基础使用</h2><ol><li><strong>初始化目录</strong><br><div align="center"><br><img src="/images/tool/gulp.jpg" alt="初始化目录结构" title="初始化目录结构"></div><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cnpm install gulp -g  <span class="comment">// 全局安装，执行gulp任务</span></span><br><span class="line">cd GulpTest </span><br><span class="line">cnpm init      <span class="comment">// 生成package.json文件</span></span><br><span class="line">cnpm install gulp -S  <span class="comment">// 本地安装，使用gulp插件并避免版本冲突</span></span><br><span class="line">gulp -v       <span class="comment">// 查看版本</span></span><br></pre></td></tr></tbody></table></figure></li></ol><ol start="2"><li><p><strong>编写配置文件 gulpfile.js</strong></p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> sass = <span class="built_in">require</span>(<span class="string">'gulp-sass'</span>);        <span class="comment">//编译sass</span></span><br><span class="line"><span class="keyword">var</span> maps = <span class="built_in">require</span>(<span class="string">'gulp-sourcemaps'</span>);  <span class="comment">//在浏览器显示scss样式以便调试</span></span><br><span class="line"><span class="keyword">var</span> autoprefixer = <span class="built_in">require</span>(<span class="string">'gulp-autoprefixer'</span>);  <span class="comment">//自动添加前后缀</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> htmlmin = <span class="built_in">require</span>(<span class="string">'gulp-htmlmin'</span>);  <span class="comment">//html压缩</span></span><br><span class="line"><span class="keyword">var</span> uglify = <span class="built_in">require</span>(<span class="string">'gulp-uglify'</span>);    <span class="comment">//压缩js文件</span></span><br><span class="line"><span class="keyword">var</span> smushit = <span class="built_in">require</span>(<span class="string">'gulp-smushit'</span>);  <span class="comment">//图片压缩</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> concat = <span class="built_in">require</span>(<span class="string">'gulp-concat'</span>);    <span class="comment">//文件合并</span></span><br><span class="line"><span class="keyword">var</span> babel = <span class="built_in">require</span>(<span class="string">'gulp-babel'</span>);      <span class="comment">//将ES6代码编译成ES5</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> bs = <span class="built_in">require</span>(<span class="string">'browser-sync'</span>).create();  <span class="comment">//页面同步</span></span><br><span class="line"><span class="keyword">var</span> reload = bs.reload;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 默认任务</span></span><br><span class="line">gulp.task(<span class="string">'default'</span>, [<span class="string">'server'</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打包任务</span></span><br><span class="line"><span class="comment">// gulp.task('build', ['html', 'css', 'less', 'js'])</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// sass 任务</span></span><br><span class="line">gulp.task(<span class="string">'sass'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">  <span class="keyword">return</span> gulp.src(<span class="string">'./src/scss/*.scss'</span>)  <span class="comment">// 导入文件</span></span><br><span class="line">    .pipe(maps.init())        <span class="comment">// 将页面样式定义到scss</span></span><br><span class="line">      <span class="comment">// 转译scss到css,报错时输出错误信息,不终止程序运行 </span></span><br><span class="line">    .pipe(sass({<span class="string">"outputStyle"</span>: <span class="string">"compressed"</span>}).on(<span class="string">'error'</span>, sass.logError))</span><br><span class="line">                                </span><br><span class="line">    .pipe(autoprefixer())       <span class="comment">// 自动添加前后缀</span></span><br><span class="line">    .pipe(maps.write(<span class="string">'./'</span>))     <span class="comment">// 生成map文件（和css文件放在一起）</span></span><br><span class="line">    .pipe(gulp.dest(<span class="string">'./dist/css'</span>))    <span class="comment">// 将生成的文件放到css文件夹中</span></span><br><span class="line">    .pipe(reload({<span class="attr">stream</span>:<span class="literal">true</span>}))       </span><br><span class="line">    <span class="comment">// 任务完成后（监听关闭后），再有修改时重新启动监听时会重新执行以防报错</span></span><br><span class="line">})</span><br><span class="line"></span><br><span class="line"><span class="comment">// 压缩 html </span></span><br><span class="line">gulp.task(<span class="string">'mihtml'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">  <span class="keyword">var</span> options = {</span><br><span class="line">        removeComments: <span class="literal">true</span>,     <span class="comment">// 清除HTML注释</span></span><br><span class="line">        collapseWhitespace: <span class="literal">true</span>, <span class="comment">// 压缩HTML</span></span><br><span class="line">        minfyJS: <span class="literal">true</span>,     <span class="comment">// 压缩JS</span></span><br><span class="line">        minfyCss: <span class="literal">true</span>,    <span class="comment">// 压缩CSS</span></span><br><span class="line">    };</span><br><span class="line">    <span class="keyword">return</span> gulp.src(<span class="string">'./src/html/*.html'</span>)  </span><br><span class="line">        .pipe(htmlmin(options))  </span><br><span class="line">        .pipe(gulp.dest(<span class="string">'./dist/html/'</span>))</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line"><span class="comment">// 压缩 js </span></span><br><span class="line">gulp.task(<span class="string">'minijs'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{   </span><br><span class="line">    gulp.src(<span class="string">'!./src/js/*.js'</span>)       <span class="comment">// !表示除了...之外 </span></span><br><span class="line">    .pipe(babel())</span><br><span class="line">    .pipe(uglify())<span class="comment">//压缩  </span></span><br><span class="line">    <span class="comment">// .pipe(concat('all.min.js'))   //合并到all.min.js中  </span></span><br><span class="line">    .pipe(gulp.dest(<span class="string">'./dist/js/'</span>));  <span class="comment">//指定目录  </span></span><br><span class="line">}); </span><br><span class="line"></span><br><span class="line"><span class="comment">// 压缩 img </span></span><br><span class="line">gulp.task(<span class="string">'img'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">    <span class="keyword">return</span> gulp.src(<span class="string">'./src/img/*.*'</span>)</span><br><span class="line">        .pipe(smushit({</span><br><span class="line">            verbose: <span class="literal">true</span></span><br><span class="line">        }))</span><br><span class="line">        .pipe(gulp.dest(<span class="string">'./dist/img/'</span>));</span><br><span class="line">});</span><br><span class="line"><span class="comment">//生成服务并自动化监听项目</span></span><br><span class="line">gulp.task(<span class="string">'server'</span>, [<span class="string">'sass'</span>,<span class="string">'mihtml'</span>,<span class="string">'minijs'</span>], <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">    bs.init({</span><br><span class="line">      open: <span class="string">'external'</span>,  <span class="comment">//启动时自动打开的网址(local打开本地主机网址)</span></span><br><span class="line">      server: <span class="string">'./dist/html'</span> <span class="comment">//设置根目录dist(默认打开其中index.html)</span></span><br><span class="line">      <span class="comment">/*</span></span><br><span class="line"><span class="comment">        默认打开 test.html</span></span><br><span class="line"><span class="comment">        baseDir: "./",</span></span><br><span class="line"><span class="comment">        index: "test.html"</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">    })</span><br><span class="line">    <span class="comment">// 监听html</span></span><br><span class="line">    gulp.watch(<span class="string">'./src/html/*.html'</span>, [<span class="string">'mihtml'</span>])</span><br><span class="line">    gulp.watch(<span class="string">'./dist/html/*.html'</span>).on(<span class="string">'change'</span>, reload)</span><br><span class="line">    <span class="comment">//监听scss</span></span><br><span class="line">    gulp.watch(<span class="string">'./src/scss/*.scss'</span>,[<span class="string">'sass'</span>]);</span><br><span class="line">    gulp.watch(<span class="string">'./dist/css/*.css'</span>).on(<span class="string">'change'</span>, reload)</span><br><span class="line">    <span class="comment">//监听js</span></span><br><span class="line">    gulp.watch(<span class="string">'./src/js/*.js'</span>, [<span class="string">'minijs'</span>])</span><br><span class="line">    gulp.watch(<span class="string">'./dist/js/*js'</span>).on(<span class="string">'change'</span>, reload)</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>运行gulp</strong></p><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 定义 package.json 文件中的 scripts</span><br><span class="line">"scripts": {</span><br><span class="line">  "test": "echo \"Error: no test specified\" && exit 1",</span><br><span class="line">  "start": "gulp dev",                   //执行gulp dev命令</span><br><span class="line">  "clean": "rimraf dist",                // 清空删除dist中所有文件</span><br><span class="line">  "build": "rimraf dist && gulp build"   // 执行两个命令，先清空dist再重新打包</span><br><span class="line">},</span><br><span class="line">//注意先全局安装rimraf: npm install rimraf -g</span><br></pre></td></tr></tbody></table></figure></li></ol><h1 id="四、Webpack"><a href="#四、Webpack" class="headerlink" title="四、Webpack"></a>四、Webpack</h1><h2 id="模块打包工具"><a href="#模块打包工具" class="headerlink" title="模块打包工具"></a>模块打包工具</h2><div style="text-indent:2em">分析项目结构，找到Js模块和浏览器不能直接运行的拓展语言(Scss、TypeScript等)，并将其转换和打包为合适的格式供浏览器使用。在很多场景下可以替代Gulp/Grunt类的工具，工作流程如下：</div><ul><li>Gulp/Grunt：在一个配置文件中，指定对某些文件进行编译、组合、压缩等任务的具体步骤，工具会自动替你完成这些任务。</li><li>Webpack：把项目当做一个整体，从一个给定主文件(如index.js)开始找到项目的所有依赖文件，使用loaders处理它们，把所有的非js资源(css/img等)都转换成 js，然后用 CommonJS 的机制管理起来。</li></ul><h2 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h2><ul><li>入口（entry）：即要编译的文件。指定后webpack会自行寻找依赖的文件打包编译</li><li>输出（output）：编译转换好之后的文件写入位置</li><li>加载器（loader）：转换scss、ES6等不同类型的文件，从而可以在浏览器中运行</li><li>插件（plugin）：完成压缩文件等loader无法解决的功能</li></ul><h2 id="基础使用-1"><a href="#基础使用-1" class="headerlink" title="基础使用"></a>基础使用</h2><ol><li><p><strong>初始化目录</strong><br></p><div align="center"><br><img src="/images/tool/webpack.jpg" alt="初始化目录结构" title="初始化目录结构"></div><p></p><p></p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd WebTest                          </span><br><span class="line">cnpm install -g webpack   <span class="comment">// 全局安装</span></span><br><span class="line">cnpm install -S webpack   <span class="comment">// 本地安装</span></span><br><span class="line">cnpm init                 <span class="comment">// 新建package.json</span></span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>基础配置</strong></p><div style="text-indent:2em">在项目根目录下新建 webpack.config.js 文件并配置选项，配置后在终端里执行 webpack 就会被自动引用。项目开发时可以创建多个配置文件：webpack.dev.config.js 和 webpack.pub.config.js 分别用于开发和生产环境，不过运行时需要使用命令 webpack –config webpack.dev.config.js</div><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = {</span><br><span class="line">  entry: __dirname + <span class="string">'/app/main.js'</span>, <span class="comment">// 唯一入口文件</span></span><br><span class="line">  output: {</span><br><span class="line">      filename: <span class="string">'bundle.js'</span>,         <span class="comment">// 输出文件名</span></span><br><span class="line">      path: __dirname + <span class="string">"/dist"</span>,     <span class="comment">// 输出文件存放地址</span></span><br><span class="line">      <span class="comment">// path: path.resolve(__dirname, 'dist') </span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// package.json文件中的scripts选项配置快捷执行方法</span><br><span class="line">"scripts": {</span><br><span class="line">  "dev":"webpack --config webpack.dev.config.js",</span><br><span class="line">  "pub":"webpack --config webpack.pub.config.js",</span><br><span class="line">  "start": "webpack",</span><br><span class="line">  "server": "webpack-dev-server --inline" </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ol><h2 id="高级配置"><a href="#高级配置" class="headerlink" title="高级配置"></a>高级配置</h2><h3 id="配置-Babel"><a href="#配置-Babel" class="headerlink" title="配置 Babel"></a>配置 Babel</h3><ul><li>功能：将 ES6、jsx等语法编译为浏览器能够运行的js</li><li>配置：webpack.config.js 或单独的 .babelrc 文件（webpack会自动调用）</li></ul><h3 id="生成-Source-Maps"><a href="#生成-Source-Maps" class="headerlink" title="生成 Source Maps"></a>生成 Source Maps</h3><div style="text-indent:2em">有时打包后文件出错了，却不容易找到对应代码的位置，而通过配置 devtool 选项后，webpack就可以在打包时生成source maps，这为我们提供了一种对应编译文件和源文件的方法，使得编译后的代码可读性更高，也更容易调试。可选的四种配置如下：</div><ul><li>source-map：完整且功能完全的单独文件，但会减慢打包速度</li><li>cheap-module-source-map：不带列映射，只能对应到具体的行</li><li>eval-source-map：不影响速度且完整，但有隐患，可开发不可生产阶段</li><li>cheap-module-eval-source-map：生成Source Map最快且和js同行，不利于调试，推荐在大型项目考虑时间成本时使用</li></ul><h3 id="构建本地服务器"><a href="#构建本地服务器" class="headerlink" title="构建本地服务器"></a>构建本地服务器</h3><div style="text-indent:2em">Webpack提供一个可选的本地开发服务器 webpack-dev-server，它基于node.js构建而且可以实现浏览器监听代码修改并自动刷新等效果，配置前需要通过 npm 安装它作为项目依赖。</div><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = {</span><br><span class="line">    entry: __dirname + <span class="string">'/app/main.js'</span>,</span><br><span class="line">    output: {</span><br><span class="line">        path: path.resolve(__dirname, <span class="string">'dist'</span>),</span><br><span class="line">        filename: <span class="string">'bundle.js'</span></span><br><span class="line">    },</span><br><span class="line">    devServer: {</span><br><span class="line">        contentBase: <span class="string">"./dist"</span>,    <span class="comment">// 加载页面的所在目录</span></span><br><span class="line">        historyApiFallback: <span class="literal">true</span>, <span class="comment">// 不跳转</span></span><br><span class="line">        inline: <span class="literal">true</span>,   <span class="comment">// 实时刷新</span></span><br><span class="line">        hot: <span class="literal">true</span>  <span class="comment">// 热更新，即不刷新浏览器的前提下刷新页面</span></span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置后执行 npm run server</span></span><br></pre></td></tr></tbody></table></figure><hr><h1 id="五、Git"><a href="#五、Git" class="headerlink" title="五、Git"></a>五、Git</h1><h2 id="Git-和-Svn"><a href="#Git-和-Svn" class="headerlink" title="Git 和 Svn"></a>Git 和 Svn</h2><ol><li>Svn：集中式管理工具。所有版本文件都集中存放到一个服务器上，所有开发者都从该服务器上更新或上传修改代码，注意需要连网。</li><li>Git：分布式管理工具，分布式指每台电脑都是一个版本仓库，但在实际工作中一般会有一个集中的服务中心 Github。与集中式的最大区别在于开发者可以离线在本地提交, 只需在连网时push到相应的服务器或其他用户, 而且每个开发者通过克隆(git clone)可以在本地机器上拷贝一个完整的Git仓库。</li></ol><h2 id="Git-和-Github的关系"><a href="#Git-和-Github的关系" class="headerlink" title="Git 和 Github的关系"></a>Git 和 Github的关系</h2><ol><li>Git：指定了remote链接和用户信息（用户名+邮箱）之后，git可以帮你将提交过到你本地分支的代码push到远程的git仓库（任意提供了git托管服务的服务器上都可以，包括你自己建的服务器 或者 GitHub等网站提供的服务器）或者将远程仓库的代码 fetch 到本地。</li><li>Github：只是一个提供存储空间的服务器，用来存储git仓库。当然现在Github已经由一个存放git仓库的网站空间发展为了一个开源社区（不只具有存储git仓库的功能了），你可以参与别人的开源项目，也可以让别人参与你的开源项目。</li></ol><h2 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h2><div style="text-indent:2em">开发者在自己的机器上更新服务器上的最新代码，然后根据需要创建分支，在该分支上提交本地修改的代码到远程仓库并通知主开发者合并代码。如果主开发者发现代码有冲突则让开发者修改后重新提交，没有冲突则合并代码。注意本地的 .git文件是指本地仓库，.git目录下存放着所有文件的版本和关联信息但默认隐藏。开发流程图如下</div><br><div align="center"><br><img src="/images/tool/git_work.jpg" alt="git工作流程图" title="git工作流程图"><br><br></div><h2 id="常用命令-1"><a href="#常用命令-1" class="headerlink" title="常用命令"></a>常用命令</h2><div align="center"><br><img src="/images/tool/git_order.jpg" alt="git常用命令图" title="git常用命令"><br><br></div><h2 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h2><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git config --global --list         <span class="comment">//查看全局配置</span></span><br><span class="line">git config --global user.name <span class="string">"chuanggefighting"</span>    <span class="comment">//设置用户名</span></span><br><span class="line">git config --global user.email <span class="string">"17621538916@163.com"</span>    <span class="comment">//设置邮箱</span></span><br></pre></td></tr></tbody></table></figure><h2 id="ssh密钥配置"><a href="#ssh密钥配置" class="headerlink" title="ssh密钥配置"></a>ssh密钥配置</h2><div style="text-indent:2em">Git使用https协议，每次pull/push都要输入密码比较麻烦，而使用git协议后使用ssh密钥，这样可以省去每次都输密码。配置步骤如下：</div><ol><li>检测SSH keys是否存在：cd ~/.ssh</li><li><p>创建ssh key(生成密钥对)：ssh-keygen -t rsa -C “<a href="mailto:17621538916@163.com" rel="external nofollow noopener noreferrer" target="_blank">17621538916@163.com</a>“</p><ul><li>此时会提示自定义名称和push时的密码 (不是git登录密码), 一般推荐略过(直接三个回车), 如果看到成功保存信息则说明如果创建成功</li></ul></li><li><p>添加公钥到github等个人的远程仓库</p><ol><li>查看生成的公钥：cat ~/.ssh/id_rsa.pub</li><li>登陆github：点击头像 –> Settings –> 左栏点击SSH and GPG keys –> 点击 New SSH key –> 复制上面的公钥内容，粘贴进”Key”，title自定义 –> 点击 Add key</li><li>测试SSH的连接：ssh -T <a href="mailto:git@github.com" rel="external nofollow noopener noreferrer" target="_blank">git@github.com</a></li><li>输入yes后可看到信息</li></ol></li></ol><h2 id="工作提交代码"><a href="#工作提交代码" class="headerlink" title="工作提交代码"></a>工作提交代码</h2><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  *  远程分支   -->  本地分支</span></span><br><span class="line"><span class="comment">  *  orgin/master --> master</span></span><br><span class="line"><span class="comment">  *  orgin/dev/t_lishi/xx --> dev/t_lishi/xx</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"></span><br><span class="line">git fetch --all        <span class="comment">//更新远程修改但不会merge</span></span><br><span class="line">git reset --hard orgin/master  <span class="comment">//强制更新(慎用)</span></span><br><span class="line"></span><br><span class="line">git pull orgin master  <span class="comment">// 拉取代码到本地并合并到本地</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">git branch            <span class="comment">// 查看本地分支</span></span><br><span class="line">git checkout master   <span class="comment">//切换到主分支分支</span></span><br><span class="line"></span><br><span class="line">git branch -D BranchName    <span class="comment">// 删除本地分支(--delete/-d)</span></span><br><span class="line">git branch -r -D origin/BranchName  <span class="comment">// 删除远程分支</span></span><br><span class="line">git push origin :BranchName   <span class="comment">// 删除远程分支简单方法</span></span><br><span class="line"></span><br><span class="line">git checkout -b dev/t_lishi/Navigation  <span class="comment">// 创建并切换到该分支          </span></span><br><span class="line"><span class="comment">// 相当于以下两个命令的合并</span></span><br><span class="line">git branch branchName     新建    </span><br><span class="line">git checkout branchName   切换</span><br><span class="line"></span><br><span class="line">git push origin dev/t_lishi/Navigation  <span class="comment">// 推送到远端</span></span><br><span class="line">git branch -a      <span class="comment">// 查看远程分支</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改某个文件后操作</span></span><br><span class="line">git status  查看状态</span><br><span class="line">git add TaskDoc/t_lishi.log  <span class="comment">// 指定需要提交到本地仓库的文件</span></span><br><span class="line">git status </span><br><span class="line">git commit -m <span class="string">"create Navigation"</span>      提交代码到本地</span><br><span class="line">git push origin dev/t_lishi/Navigation    推送到远程仓库</span><br></pre></td></tr></tbody></table></figure><h2 id="把个人网页挂到Github"><a href="#把个人网页挂到Github" class="headerlink" title="把个人网页挂到Github"></a>把个人网页挂到Github</h2><ol><li><strong>在Github上建立仓库，如bird</strong></li><li><strong>进入新建仓库并选择“settings”进行仓库设置，滚动到页面底部“Github Pages”部分</strong><ul><li>点击“Select theme”对主题进行选择，完成后一个具备远程访问功能的仓库就已经设置好了</li><li>此时就可以通过网址访问了：chuanggefighting.github.io/bird/</li></ul></li><li><p><strong>将仓库代码克隆到本地</strong></p><ul><li>删除除了 .git 以外的其他文件，然后通过以下命令测试<figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add *               <span class="comment">// 添加到暂存区</span></span><br><span class="line">git commit -m <span class="string">'del'</span>     <span class="comment">// 上传到本地仓库</span></span><br><span class="line">git push origin master  <span class="comment">// 上传到远程仓库</span></span><br></pre></td></tr></tbody></table></figure></li></ul></li><li><p><strong>更新个人代码到远程仓库</strong></p></li></ol><!-- rebuild by neat --></body></html>]]></content>
    
    <summary type="html">
    
      Npm、Gulp、WebPack等构建工具 和 代码管理工具 Git
    
    </summary>
    
      <category term="Web Skills" scheme="https://chuanggefighting.github.io/categories/Web-Skills/"/>
    
    
      <category term="Skill" scheme="https://chuanggefighting.github.io/tags/Skill/"/>
    
  </entry>
  
  <entry>
    <title>web 入门</title>
    <link href="https://chuanggefighting.github.io/2019/02/17/2-web%E5%85%A5%E9%97%A8/"/>
    <id>https://chuanggefighting.github.io/2019/02/17/2-web入门/</id>
    <published>2019-02-17T07:41:48.000Z</published>
    <updated>2019-03-06T14:24:10.841Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Mar 06 2019 22:26:54 GMT+0800 (中国标准时间) --><html><head></head><body><h1 id="一、电脑系统"><a href="#一、电脑系统" class="headerlink" title="一、电脑系统"></a>一、电脑系统</h1><h2 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h2><ol><li><strong>Windows</strong><ul><li>人妻，什么都有，还常附带不想要的东西。</li><li>微软的系统，基于Basic开发，是最普及的桌面系统，主要特点是功能强大但安全堪忧，适用于正常办公以及游戏。</li></ul></li></ol><ol start="2"><li><strong>Mac OS/OSX</strong><ul><li>女友，带着有面子但必须按照它的规则。</li><li>苹果系统，基于linux开发，主要特点是应用软件较少和较安全，适用于办公的高端移动化处理。</li></ul></li></ol><ol start="3"><li><strong>Linux</strong><ul><li>小萝莉，你让它干嘛就干嘛。</li><li>一种自由和开放源码的类Unix操作系统，可安装在手机电脑等各种计算机硬件设备中，主要特点是网络功能强大且对内存等硬件的消耗小，多用于网络服务器中，优点是其易用性和丰富的应用软件。</li></ul></li></ol><h2 id="操作接口"><a href="#操作接口" class="headerlink" title="操作接口"></a>操作接口</h2><ol><li><strong>终端 terminal</strong><ul><li>用于人与计算机进行交互的输入输出接口</li><li>本质是通过电缆、网络等连接主机的外部附加设备，一台计算机可以连接个终端</li></ul></li></ol><ol start="2"><li><strong>控制台 console</strong><ul><li>用于管理主机的特殊终端，只允许管理员使用</li><li>本质是直接和计算机相连接的原生设备，一台计算机一般只能有一个控制台</li></ul></li></ol><ol start="3"><li><strong>命令解释器 shell</strong><ul><li>提供用户界面的程序，用于与计算机内核交互</li><li>本质是 接受用户指令后，调用其他程序与内核交互完成指令</li><li>一般分为 命令行shell 和 图形shell，分别提供 命令行界面 CLI 和 图形用户界面 GUI</li><li>批处理：将一系列命令按照一定顺序集合为一个可执行的文本文件，在window系统的扩展名为 bat/cmd，双击文件即可运行</li></ul></li></ol><ol start="4"><li><strong>终端与 shell 的分工</strong><ul><li>终端从用户接受 鼠标键盘等设备的输入信息，然后发送给 shell</li><li>shell 从终端获取用户指令，解析后发给计算机内核执行，并返回结果给终端</li></ul></li></ol><h1 id="二、工作站"><a href="#二、工作站" class="headerlink" title="二、工作站"></a>二、工作站</h1><h2 id="mac-工作站"><a href="#mac-工作站" class="headerlink" title="mac 工作站"></a>mac 工作站</h2><ol><li><strong>应用软件安装</strong><ul><li>通过 App Stroe 安装</li><li>将浏览器中下载好的 dmg 安装包拖到”应用程序”目录</li></ul></li></ol><ol start="2"><li><p><strong>系统软件安装</strong></p><ul><li>brew 即 Homebrew，是 Mac OSX 上的软件包管理工具，用来安装、更新、卸载软件</li><li>命令行配置环境变量：vi ~/.bash_profile - 编辑文件 - esc键退出编辑 - :wq回车保存</li></ul></li><li><p><strong>实现翻墙</strong></p><ul><li>配置VPN：VPN 即虚拟专用网络，可用来保护隐私和自由访问外国网站</li><li>配置proxy：即配置代理地址</li></ul></li></ol><h2 id="chrome-工作站"><a href="#chrome-工作站" class="headerlink" title="chrome 工作站"></a>chrome 工作站</h2><ol><li><strong>搜索</strong>（Google输入框中所有空格都被理解为加号）<ul><li>完整匹配: “mysql foreign key”（引号）</li><li>筛选: “mysql key” - “nodejs”（加减号）</li><li>返回所有: “mysql connect error *”（加通配符）</li><li>站内搜索: “mysql foreign key” site:stackoverflow.com</li><li>加速: 输入网址后点击Tab，这样可直接使用该站点的站内搜索</li></ul></li></ol><ol start="2"><li><strong>调试js代码</strong><ul><li>Alert, Console等</li><li>断点调试<ul><li>步骤：F12开发者工具 ——> 点击Sources菜单 ——> 左侧树中找到相应文件 ——> 点击行号列(右键为条件断点) ——> 刷新页面 ——> JS执行到断点位置停住，此时可以跟随鼠标查看功能按钮</li><li><a href="http://blog.csdn.net/crper/article/details/50722753" rel="external nofollow noopener noreferrer" target="_blank">相关技巧</a></li></ul></li><li>debug断点<ul><li>在触发文件中添加 “debugger;” 语句后触发，当代码执行到该语句时就会自动断点, 接下去的操作和在Sources面板添加断点调试几乎一模一样，唯一区别在于调试后需要删除该语句。</li><li>由于有时会遇到异步加载html片段的情况，其JS代码在Sources中无法找到，因此无法直接在开发工具中直接添加断点时可用debug断点（F10一步一步执行，F8一下执行完成）</li></ul></li></ul></li></ol><ol start="3"><li><strong>高阶调试功能</strong><ul><li><a href="https://www.cnblogs.com/guaidianqiao/p/7615430.html" rel="external nofollow noopener noreferrer" target="_blank">内置抓包工具等</a></li></ul></li></ol><ol start="4"><li><strong>扩展插件</strong><ul><li>谷歌访问助手<ul><li>安装：<a href="http://www.ggfwzs.com/" rel="external nofollow noopener noreferrer" target="_blank">下载安装包</a> ——> 更多工具 ——> 扩展程序 ——> 直接拖拽 ——> 添加扩展程序</li><li>扩展其它插件：谷歌访问助手 ——> 谷歌网上商店 ——> 搜索插件 ——> 点击添加扩展</li></ul></li><li>常用插件推荐<ul><li>掘金</li><li>Google翻译</li><li>FeHelper</li><li>JSONView</li><li>What runs</li><li>Clear Cache</li><li>Code Plunker</li><li>Vue.js devtools</li><li>AngularJS Batarang</li><li>React Developer Tools</li></ul></li></ul></li></ol><ol start="5"><li><p><strong>Chrome黑科技</strong></p><ul><li><p>实现翻墙</p><ul><li>配置proxy代理：setting system ——> proxy settings ——> LAN setting ——> proxy server ——> 配置 Address 和 Port</li><li>配置Chrome扩展：下载<a href="https://www.crx4chrome.com/crx/39922/" rel="external nofollow noopener noreferrer" target="_blank">Hoxx VPN Proxy</a> ——> 注册登录</li></ul></li><li><p>解析VIP视频</p><ul><li>打开网站 <a href="https://greasyfork.org/zh-CN" rel="external nofollow noopener noreferrer" target="_blank">Greasy Fork</a> ——> 搜索VIP视频解析 ——> 安装脚本</li></ul></li><li><p>其它：视频广告过滤、电脑管家上网防护等</p></li></ul></li></ol><h1 id="三、代码编辑器"><a href="#三、代码编辑器" class="headerlink" title="三、代码编辑器"></a>三、代码编辑器</h1><ol><li><strong>sublime</strong></li><li><p><strong>vscode</strong></p><ul><li><p>基础配置</p><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">// 配置中文：ctrl + shift + p --> Display Language</span><br><span class="line">    "locale":"zh-CN"</span><br><span class="line"></span><br><span class="line">// 用户配置：文件 --> 首选项 --> 设置 --> User Settings</span><br><span class="line">    // 指定工作台中使用的颜色主题。    </span><br><span class="line">    "workbench.colorTheme": "Monokai",    </span><br><span class="line">    // 指定在工作台中使用的图标主题    </span><br><span class="line">    "workbench.iconTheme": "vscode-icons",    </span><br><span class="line">    // 窗口失去焦点自动保存    </span><br><span class="line">    "files.autoSave": "off",    </span><br><span class="line">    // 如果设置为 "true"，将不再显示扩展建议的通知。   </span><br><span class="line">    "extensions.ignoreRecommendations": true,    </span><br><span class="line">    // 如果设置成 true，关于新的版本消息将不再显示    </span><br><span class="line">    "vsicons.dontShowNewVersionMessage": true,    </span><br><span class="line">    // 控制是否将打开的编辑器显示为预览。    </span><br><span class="line">    "workbench.editor.enablePreview": false,   </span><br><span class="line">    // 字体字号</span><br><span class="line">    "editor.fontSize": 18, </span><br><span class="line">    //代码缩进风格4个字符    </span><br><span class="line">    "editor.tabSize": 4,    </span><br><span class="line">    // 控制编辑器是否应在键入后自动设置行的格式    </span><br><span class="line">    "editor.formatOnType": false,    </span><br><span class="line">    // 保存时取消自动格式化    </span><br><span class="line">    "editor.formatOnSave": false,    </span><br><span class="line">    // 编辑粘贴取消自动格式化    </span><br><span class="line">    "editor.formatOnPaste": false,    </span><br><span class="line">    // 控制编辑器中呈现空白字符的方式为“边界”，不会在单词之间呈现单空格。    </span><br><span class="line">    "editor.renderWhitespace": "boundary",    </span><br><span class="line">    // 控制光标动画样式    </span><br><span class="line">    "editor.cursorBlinking": "smooth",    </span><br><span class="line">    //设置Eslint需要验证的语言    </span><br><span class="line">    "eslint.validate": [        </span><br><span class="line">        "javascript",        </span><br><span class="line">        "javascriptreact",        </span><br><span class="line">        "html",        </span><br><span class="line">        "vue",        </span><br><span class="line">        {            </span><br><span class="line">            <span class="attr">"language"</span>: <span class="string">"vue"</span>,            </span><br><span class="line">            <span class="attr">"autoFix"</span>: <span class="literal">true</span>        </span><br><span class="line">        }</span><br><span class="line">    ],</span><br><span class="line">    //每列显示内容长多，超出时控制编辑器列的换行。</span><br><span class="line">    "editor.wordWrap": "wordWrapColumn",</span><br><span class="line">    "editor.wordWrapColumn": 150,</span><br><span class="line">    //创建人，修改人    </span><br><span class="line">    "fileheader.Author": "klierbyck",    </span><br><span class="line">    "fileheader.LastModifiedBy": "klierbyck",    </span><br><span class="line">    // 在函数参数括号前定义空格处理。需要 TypeScript >= 2.1.5。    </span><br><span class="line">    "typescript.format.insertSpaceBeforeFunctionParenthesis": true,    </span><br><span class="line">    // 在函数参数括号前定义空格处理。需要 TypeScript >= 2.1.5。    </span><br><span class="line">    "javascript.format.insertSpaceBeforeFunctionParenthesis": true,</span><br><span class="line">    // HTML Snippets 插件配置</span><br><span class="line">    "emmet.triggerExpansionOnTab": true,</span><br><span class="line">    "emmet.includeLanguages": {</span><br><span class="line">        "vue-html": "html",</span><br><span class="line">        "vue": "html"</span><br><span class="line">    },</span><br></pre></td></tr></tbody></table></figure></li><li><p>常用扩展插件</p><ul><li>显示效果类<ul><li>Dracula Official ：高亮主题</li><li>Beautify ：代码高亮</li><li>vscode-icon ：让资源树目录加上图标</li><li>Bracket Pair Colorizer ：每一对括号用不同颜色区别</li><li>Open-In-Browser ：直接在浏览器中打开文件的快捷菜单 alt + b</li></ul></li><li>辅助编辑类<ul><li>ESlint ：检测js</li><li>Prettier ：代码格式化 alt + shift + F</li><li>CSS Peek ：追踪至定义处（右键选择前两个选项）</li><li>Path Intellisense ：自动补全路径</li><li>Auto Close Tag ：自动闭合HTML标签</li><li>Auto Rename Tag ：自动修改匹配的标签</li><li>HTML CSS Support ：CSS的智能补全</li><li>JavaScript (ES6) code snippets ：JS语法提示</li></ul></li><li>Vue插件类<ul><li>Vetur ：语法高亮</li><li>VueHelper ：vue代码提示插件</li><li>Vue 2 Snippets ：语法高亮 + 代码补全</li><li>HTML Snippets ：在.vue文件中使用html代码补全功能</li></ul></li><li>其它类<ul><li>npm ：运行npm命令</li><li>npm Intellisense ：导入时提示已安装模块</li><li>Python ：添加对.py文件的支持</li><li>GitLens ：简单实现git提交代码</li><li>Debugger for chrome ：调试Debug</li></ul></li></ul></li></ul></li></ol><h1 id="四、程序员网站"><a href="#四、程序员网站" class="headerlink" title="四、程序员网站"></a>四、程序员网站</h1><ol><li><p><strong>常用</strong></p><ul><li><a href="https://www.docschina.org/" rel="external nofollow noopener noreferrer" target="_blank">印记中文</a>：教程中文版</li><li><a href="http://tool.chinaz.com/tools/openweb.aspx/" rel="external nofollow noopener noreferrer" target="_blank">站长工具</a>：代码整理和测试</li><li><a href="http://tool.lu/" rel="external nofollow noopener noreferrer" target="_blank">在线工具</a>：代码处理工具合集</li><li><a href="https://github.com/" rel="external nofollow noopener noreferrer" target="_blank">Github</a>：代码托管</li><li><a href="https://stackoverflow.com/" rel="external nofollow noopener noreferrer" target="_blank">Stack Overflow</a>：技术问答社区</li><li><a href="https://stackoverflow.com/" rel="external nofollow noopener noreferrer" target="_blank">Learn Anything</a>：思维导图形式学习技术</li></ul></li><li><p><strong>提升</strong></p><ul><li><a href="http://naotu.baidu.com/" rel="external nofollow noopener noreferrer" target="_blank">百度脑图</a>：思维导图</li><li><a href="https://slides.com/" rel="external nofollow noopener noreferrer" target="_blank">ProcessOn</a>：脑图工具</li><li><a href="https://www.processon.com/" rel="external nofollow noopener noreferrer" target="_blank">Slides</a>：WebPPT 编辑器</li><li><a href="https://caniuse.com/" rel="external nofollow noopener noreferrer" target="_blank">CanIuse</a>：浏览器兼容</li><li><a href="http://overapi.com/" rel="external nofollow noopener noreferrer" target="_blank">Overapi</a>：API速查手册</li><li><a href="https://runjs.cn/" rel="external nofollow noopener noreferrer" target="_blank">RunJS</a>：JS在线编辑和分享</li><li><a href="https://standardjs.com/" rel="external nofollow noopener noreferrer" target="_blank">Standardjs</a>：JS编码规范</li><li><a href="https://www.favicon-generator.org/" rel="external nofollow noopener noreferrer" target="_blank">Faviconer</a>：图标生成器</li></ul></li></ol><ol start="3"><li><strong>了解</strong><ul><li><a href="https://github.com/easychen/howto-make-more-money" rel="external nofollow noopener noreferrer" target="_blank">零花钱</a>：接单网站</li><li><a href="https://electronjs.org/" rel="external nofollow noopener noreferrer" target="_blank">Electron</a>：跨平台程序</li><li><a href="https://github.com/github/gitignore" rel="external nofollow noopener noreferrer" target="_blank">.gitignore</a>：不同语言项目</li><li><a href="https://modao.cc/" rel="external nofollow noopener noreferrer" target="_blank">墨刀</a>：在线制作移动应用原型</li></ul></li></ol><h1 id="五、web开发"><a href="#五、web开发" class="headerlink" title="五、web开发"></a>五、web开发</h1><blockquote><p>呈现用户可理解的界面并响应用户操作。</p></blockquote><h2 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h2><h3 id="框架和库"><a href="#框架和库" class="headerlink" title="框架和库"></a>框架和库</h3><ul><li>类库：一个有组织的功能集合，用于提供特定功能的接口并被调用</li><li>框架：构建应用程序的整体架构，使开发者可以专注于逻辑处理而提高开发效率</li><li>联系：框架一般会集成大量库并在合适地方调用，但有时也可称之为库，两者区别只在于思考角度</li></ul><h3 id="框架模式"><a href="#框架模式" class="headerlink" title="框架模式"></a>框架模式</h3><ol><li><strong>MVC</strong></li></ol><ul><li>实现思路：所有的终端用户请求被发送到 Controller，Controller 依赖请求去选择加载哪个模型并附加到对应 View，最终 View 作为响应发送给终端用户。</li><li>缺陷：包含大量的业务逻辑后，代码就会难以阅读和维护。</li></ul><div align="center"><br><img src="/images/frame/mvc.png" alt="MVC架构图"><br><br></div><ol start="2"><li><strong>MVP</strong></li></ol><ul><li>实现思路：切断的 View 和 Model 的联系, 让 View 只和 Presenter（原Controller）交互，减少在需求变化中需要维护的对象的数量，相比 MVC 成本更低而且更容易理解。</li><li>缺陷：最接近用户的界面是需要根据需求变化而频繁更改的。</li></ul><div align="center"><br><img src="/images/frame/mvp.png" alt="MVP架构图"><br><br></div><ol start="3"><li><strong>MTV</strong></li></ol><ul><li>实现思路：Model 负责业务对象和数据库的关系映射(ORM)，Template 负责如何把页面展示给用户(html)，View 负责业务逻辑并在适当时候调用 Model和Template。此外，通过一个URL分发器将一个个URL的页面请求分发给不同的View处理，View再调用相应的Model和Template。</li></ul><div align="center"><br><img src="/images/frame/mtv.png" alt="MTV架构图"><br><br></div><ol start="4"><li><strong>MVVM</strong></li></ol><ul><li>实现思路：View 接收用户交互请求并发给ViewModel –> ViewModel 操作 Model 数据更新 –> Model 更新后通知 ViewModel 数据化 –> ViewModel 更新 View 数据。这样开发者只需关注业务逻辑，不需要手动操作DOM和关注数据状态的同步问题，复杂的数据状态维护完全由 MVVM 来统一管理，完美解决了复杂交互导致代码难以维护的问题。</li><li>优点<ul><li>独立开发（可专注于业务逻辑和数据）</li><li>低耦合性（View 和 Model 相互独立）</li><li>可重用性（可让多个 View 重用一段视图逻辑）</li><li>方便测试（可测试 ViewModel，而 Controller 不可）</li></ul></li><li>缺点<ul><li>调用复杂度增加</li><li>viewModel 会越来越庞大（逻辑多）</li><li>类会增多（每个VC都附带一个 viewModel）</li></ul></li></ul><div align="center"><br><img src="/images/frame/mvvm.png" alt="MVVM架构图"><br><br></div><h3 id="框架分类"><a href="#框架分类" class="headerlink" title="框架分类"></a>框架分类</h3><ul><li>可视化组件：Echarts</li><li>UI框架：Bootstrap、EasyUI、ElementUI</li><li>JS框架：jQuery、Zepto.js、NodeJs、requirejs、VueJs、angularJS、reactJS</li></ul><h2 id="常用规范"><a href="#常用规范" class="headerlink" title="常用规范"></a>常用规范</h2><ol><li><p><strong>命名</strong></p><ul><li>统一使用小写英文字母、数字和下划线的组合，而且要语义化</li><li>标签命名时应该考虑代码的可维护性，注意id名字须保证唯一性</li></ul></li><li><p><strong>js注释</strong></p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 单行注释</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">多行注释</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* ---------------------------------------------------</span></span><br><span class="line"><span class="comment">* 模块描述说明</span></span><br><span class="line"><span class="comment">* ---------------------------------------------------</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 模块内的小函数方法归类</span></span><br><span class="line"><span class="comment">* ---------------------------------------------------</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 单个函数功能简述</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* 具体描述一些细节</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* @param    {string}  address     地址</span></span><br><span class="line"><span class="comment">* @param    {array}   com         商品数组</span></span><br><span class="line"><span class="comment">* @param    {string}  pay_status  支付方式</span></span><br><span class="line"><span class="comment">* @returns  void</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* @date     2019-02-12</span></span><br><span class="line"><span class="comment">* @author   QETHAN<qinbinyang@zuijiao.net></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></tbody></table></figure></li></ol><h2 id="Restful"><a href="#Restful" class="headerlink" title="Restful"></a>Restful</h2><div style="text-indent:2em">RESTful 是一种架构的规范与约束、原则而并非架构或标准，符合这种规范的架构就是 RESTful架构。基于这个风格设计的软件可以更简洁，更有层次，更容易实现缓存等机制，常用于客户端和服务器交互类的软件。</div><h3 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h3><ul><li>RESTful架构：面向资源的架构，即针对资源设计接口。客户端操作通过资源对应的 URL 进行操作，从而访问服务器端资源。</li><li>SOA架构：面向服务的体系结构。SOA将不同的功能组件视为一种服务并分别封装，降低了组件之间的耦合程度，增加了代码的复用程度。</li></ul><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul><li>资源；作为资源的标识，比如 html / jpg / json</li><li>URI：统一资源定位符，即每个 URI 对应一个特定的资源</li><li>无状态：所有资源都可以通过 URI 去定位，而不与其他资源产生耦合</li><li>统一接口：数据元操作CURD 分别对应http的 get、post、put、delete</li></ul><h3 id="URI"><a href="#URI" class="headerlink" title="URI"></a>URI</h3><ol><li><strong>区别 URL</strong><ul><li>URI：统一资源定位符，对应具体的资源。</li><li>URL：统一资源标识符，对应具体的资源的地址</li><li>联系：URL 是属于 URI 的一部分</li></ul></li></ol><ol start="2"><li><strong>规范</strong><ul><li>不用大写</li><li>用中杠 - 不用下杠 _</li><li>参数列表要 encode</li><li>名词表示资源集合，资源集合时使用复数形式如 zoos/1/animals</li><li>每个网址代表一种资源，所以网址中不能有动词，一般只能有名词，而且所用的名词往往与数据库的表格名对应</li></ul></li></ol><ol start="3"><li><strong>版本</strong><div style="text-indent:2em">应该将API的版本号放入到URI中：/api.example.com/v1/zoos</div></li></ol><ol start="4"><li><strong>通信</strong><ul><li>前后端统一使用 json 数据</li><li>客户端通过url中的 <code>？& ,</code> 实现过滤、搜索等复杂操作</li><li>客户端通过标准的 HTTP 方法（<code>GET获取、POST新建、PUT更新、DELETE删除</code>）对应服务器端资源 CRUD（数据元操作，包括 <code>SELECT、CREATE、UPDATE、DELETE</code>）</li></ul></li></ol><h2 id="web技术栈"><a href="#web技术栈" class="headerlink" title="web技术栈"></a>web技术栈</h2><div align="center"><br><img src="/images/post/technology.jpg" alt="前端技能图"><br><br></div><!-- rebuild by neat --></body></html>]]></content>
    
    <summary type="html">
    
      熟练使用电脑、浏览器和代码编辑器、了解web开发的常用网站、开发规范、Restful架构和所需技能
    
    </summary>
    
      <category term="Web Skills" scheme="https://chuanggefighting.github.io/categories/Web-Skills/"/>
    
    
      <category term="Skill" scheme="https://chuanggefighting.github.io/tags/Skill/"/>
    
  </entry>
  
  <entry>
    <title>Hexo + Github 搭建个人博客</title>
    <link href="https://chuanggefighting.github.io/2019/02/09/1-hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    <id>https://chuanggefighting.github.io/2019/02/09/1-hexo博客搭建/</id>
    <published>2019-02-08T18:31:41.000Z</published>
    <updated>2019-03-03T13:54:54.366Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Mar 06 2019 22:26:54 GMT+0800 (中国标准时间) --><html><head></head><body><h1 id="一、博客搭建"><a href="#一、博客搭建" class="headerlink" title="一、博客搭建"></a>一、博客搭建</h1><h2 id="安装-Node-js-和-Git"><a href="#安装-Node-js-和-Git" class="headerlink" title="安装 Node.js 和 Git"></a>安装 Node.js 和 Git</h2><blockquote><div style="text-indent:2em">Git安装后可以创建 <code>ssh key</code> 并添加到 GitHub上, 这样配置之后就不再需要每次更新博客时都输入用户名和密码了。</div></blockquote><h2 id="安装hexo博客框架"><a href="#安装hexo博客框架" class="headerlink" title="安装hexo博客框架"></a>安装hexo博客框架</h2><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">cnpm install -g hexo-cli    <span class="comment">// window安装</span></span><br><span class="line">sudo cnpm install -g hexo   <span class="comment">// mac安装</span></span><br><span class="line"></span><br><span class="line">cd blog            <span class="comment">//在新建的blog文件夹打开终端</span></span><br><span class="line"></span><br><span class="line">hexo init          <span class="comment">// 初始化</span></span><br><span class="line"></span><br><span class="line">hexo install       <span class="comment">// window安装依赖</span></span><br><span class="line">sudo npm install   <span class="comment">// mac安装依赖</span></span><br></pre></td></tr></tbody></table></figure><h2 id="测试本地运行（线下访问）"><a href="#测试本地运行（线下访问）" class="headerlink" title="测试本地运行（线下访问）"></a>测试本地运行（线下访问）</h2><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo g     <span class="comment">// 生成静态文件, 即 hexo generate</span></span><br><span class="line"></span><br><span class="line">hexo s     <span class="comment">// 启动本地服务器, 即 hexo server</span></span><br></pre></td></tr></tbody></table></figure><h2 id="部署到GitHub上（线上访问）"><a href="#部署到GitHub上（线上访问）" class="headerlink" title="部署到GitHub上（线上访问）"></a>部署到GitHub上（线上访问）</h2><blockquote><div style="text-indent:2em">由于Github是 外国网站且禁止百度爬虫访问，所以会导致百度搜不到你的网站。所以可以做两手准备：国内采用Coding托管，国外采用GitHub托管。</div></blockquote><ol><li><strong>在github上建立一个仓库</strong> (Start a Project)<div style="text-indent:2em">Repository name的格式是 <code>username.github.io</code>, username 必须是本人用户名, 这是GitHub Pages的特殊命名规范(亲测不区分大小写)。</div></li></ol><ol start="2"><li><p><strong>修改部署配置</strong> (blog/_config.yml)</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">    type:</span> <span class="string">git</span></span><br><span class="line"><span class="attr">    repository:</span> <span class="attr">https://github.com/chuanggefighting/chuanggefighting.github.io.git</span></span><br><span class="line"><span class="attr">    branch:</span> <span class="string">master</span></span><br></pre></td></tr></tbody></table></figure></li></ol><ol start="3"><li><p><strong>上传到服务器</strong></p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">cnpm install hexo-deployer-git --save  <span class="comment">// 安装git部署插件</span></span><br><span class="line"></span><br><span class="line">hexo clean              <span class="comment">// 清除缓存</span></span><br><span class="line">hexo n post             <span class="comment">// 新建文章，即 hexo new post </span></span><br><span class="line">hexo g                  <span class="comment">// 编译博文生成静态文件, 即 hexo generate</span></span><br><span class="line">hexo d                  <span class="comment">// 部署到github, 即 hexo deploy</span></span><br><span class="line">hexo hexo g -d          <span class="comment">// 简化命令, 部署前生成静态文件</span></span><br></pre></td></tr></tbody></table></figure></li></ol><h2 id="创建新页面"><a href="#创建新页面" class="headerlink" title="创建新页面"></a>创建新页面</h2><ol><li><p><strong>增加关于页</strong></p><ol><li>取消 about 前面的 #</li><li>hexo new page about</li><li>blog/sources/about/index.md：自定义内容</li></ol></li><li><p><strong>增加标签页</strong></p><ol><li>首先取消 next/config.yml 文件中 tags 前面的 #</li><li>hexo new page tags</li><li>blog/sources/about/index.md：<code>type: tags</code><br><br></li></ol></li><li><p><strong>增加分类页</strong></p><ol><li>取消 categories 前面的 #</li><li>hexo new page “categories”</li><li>blog/sources/categories/index.md：<code>type: categories</code><br><br></li></ol></li><li><p><strong>增加归档页</strong></p><ol><li>取消 categories 前面的 #</li><li>hexo new page “archive”</li><li>blog/sources/archive/index.md：<code>type: archive</code></li></ol></li></ol><hr><h1 id="二、博客管理"><a href="#二、博客管理" class="headerlink" title="二、博客管理"></a>二、博客管理</h1><ol><li><p><strong>NexT主题配置文件</strong></p><div style="text-indent:2em;margin-bottom:25px">NexT主题由于频繁更新，为了避免升级报错可以另存为一份配置，然后操作这个配置文件即可。首先在 blog/source 目录下新建_data文件夹，然后去复制 blog/themes/next/_config.yml 到本地并改名为 next.yml，最后将 next.yml 放置在 _data 中即可，以后编辑next.yml即可配置主题。</div></li><li><p><strong>hexo博客源文件</strong></p><div style="text-indent:2em;margin-bottom:25px">hexo d 是把本地博客源文件生成的静态网页文件同步到github上而实现部署, 但是博客网站的本地源文件仍需要保存到个人电脑，为了方便在不同电脑上可以编辑管理，可以在github上另建分支，如 hexo分支</div></li></ol><hr><h1 id="三、博客个性化配置"><a href="#三、博客个性化配置" class="headerlink" title="三、博客个性化配置"></a>三、博客个性化配置</h1><ol><li><strong>Hexo配置</strong> (blog/_config.yml)<ul><li>Site 站点配置(网站标题、作者、语言等)</li><li>URL 网址配置(网址、根目录、链接格式等)</li><li>Extensions 扩展配置(主题、插件等)</li><li>其他配置选项一般不需要修改</li></ul></li></ol><ol start="2"><li><strong>主题配置</strong> (具体在博客优化部分)<ul><li>安装主题 ：通过 git clone 下载到 blog/themes</li><li>启动主题 ：修改 blog/_config.yml 的theme选项</li><li>配置主题 ：修改 blog/themes/主题名/_config.yml</li></ul></li></ol><ol start="3"><li><strong>自定义域名配置</strong><ul><li>购买域名</li><li>域名解析</li><li>添加CNAME</li></ul></li></ol><hr><h1 id="四、NexT主题优化"><a href="#四、NexT主题优化" class="headerlink" title="四、NexT主题优化"></a>四、NexT主题优化</h1><ol><li><p><strong>实用性优化</strong></p><ul><li>添加RSS ：hexo-generator-feed</li><li>添加标签、分类等页面</li><li>设置网站icon</li><li>添加侧边栏链接</li><li>增加版权信息</li><li>微信支付宝打赏功能</li><li>底部显示建站时间和图标的修改</li><li>外部链接优化 ：hexo-autonofollow</li><li>关闭网站动画 ：use_motion</li><li>设置第三方JS库 ：vendors</li><li>添加评论系统 ：leancloud</li><li>统计站点访客和阅读量 ：busuanzi</li><li>统计文章字数和阅读时间 ：symblos_count_time</li><li>添加文章分享功能 ：needmoreshare2</li><li>添加博文压缩功能 ：hexo-neat / gulp</li><li>添加图片的懒加载 ：hexo-lazyload</li><li>添加文章加密功能 ：hexo-blog-encrypt</li><li>添加站内搜索功能 ：hexo-generator-searchdb</li><li>添加文章置顶功能 ：hexo-generator-index-pin-top</li><li>添加站点地图配置 ：hexo-generator-sitemap、hexo-generator-baidu-sitemap</li><li>DaoVoice在线联系<br><br></li></ul></li><li><p><strong>博客个性化优化</strong></p><ul><li>添加页面加载动画 ：pace</li><li>添加背景动画 ：canvas_nest</li><li>添加宠物 ：hexo-helper-live2d</li><li>添加顶部阅读进度 ：reading_progress</li><li>点击出现桃心效果 ：clicklove.js</li><li>添加代码块复制按钮 ：clickboard.js</li><li>文章末尾统一添加 “文本结束” 标记</li><li>修改文章底部标签样式</li><li>右上角的Github样式</li><li>修改作者头像并旋转</li><li>文章添加阴影效果</li></ul></li></ol><hr><h1 id="五、基于-Markdown-编写博文"><a href="#五、基于-Markdown-编写博文" class="headerlink" title="五、基于 Markdown 编写博文"></a>五、基于 Markdown 编写博文</h1><h2 id="创建文章"><a href="#创建文章" class="headerlink" title="创建文章"></a>创建文章</h2><ul><li>站点目录下执行命令 hexo new “title”</li><li>指定目录下直接创建 source/_post/title.md</li></ul><hr><h2 id="初始化设置"><a href="#初始化设置" class="headerlink" title="初始化设置"></a>初始化设置</h2><div style="text-indent:2em">使用命令创建文章时，Hexo 会根据文章的模板文件 /scaffolds/post.md 对新建文件进行初始化，可以根据需要自行修改。初始化后的文章头部除了可以设置文章标题、发布日期等基础信息外，还可以对文章添加标签、分类等，常用设置如下：</div><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">my</span> <span class="string">blog</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2019</span><span class="bullet">-02</span><span class="bullet">-04</span> <span class="number">20</span><span class="string">:45:30</span></span><br><span class="line"><span class="attr">tags:</span> <span class="string">[Hexo,</span> <span class="string">MarkDown]</span> </span><br><span class="line"><span class="attr">categories:</span> <span class="string">学习笔记</span></span><br><span class="line"><span class="attr">keywords:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">Hexo</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">加密</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 预览文章摘要</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">Markdown语法的格式和注意点</span>  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 预览加密文章摘要</span></span><br><span class="line"><span class="attr">password:</span>        <span class="comment">#文章密码</span></span><br><span class="line"><span class="attr">abstract:</span> <span class="string">enter</span> <span class="string">password</span> <span class="string">to</span> <span class="string">read</span>      <span class="comment">#文章摘要</span></span><br><span class="line"><span class="attr">message:</span> <span class="string">My</span> <span class="string">Birthday</span>      <span class="comment">#密码提示</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 预览文章内容</span></span><br><span class="line"><span class="comment"># 在要显示的内容末尾添加more分隔符 <!-- more --></span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></tbody></table></figure><h2 id="编写文章（基于Markdown）"><a href="#编写文章（基于Markdown）" class="headerlink" title="编写文章（基于Markdown）"></a>编写文章（基于Markdown）</h2><h3 id="Markdown-简介"><a href="#Markdown-简介" class="headerlink" title="Markdown 简介"></a>Markdown 简介</h3><blockquote><div style="text-indent:2em">Markdown是一种可以使用普通文本编辑器编写的轻量级「标记语言」，通过简单的标记语法可以使普通文本内容具有一定的格式，是一种适用于网络的书写语言，主要特点是易读易写、支持嵌入html标签和自动生成目录等。但是Hexo下使用的 Github风格的MarkDown（GFM）和 标准MarkDown（MD）在语法上稍有不同，以下主要介绍GFM语法。</div></blockquote><h3 id="MD-与-GFM-的区别"><a href="#MD-与-GFM-的区别" class="headerlink" title="MD 与 GFM 的区别"></a>MD 与 GFM 的区别</h3><ul><li>斜体 ：MD 使用 _ 或 *，GFM 只支持 *</li><li>自动链接 ：MD 使用<url>，GFM 可直接使用 URL</url></li><li>代码块 ：MD 使用 4个空格开头，GFM 还可以使用 ``` 格式</li><li>其他 ：GFM 可以指定语言高亮，而且增加了 删除线、表格、锚点等</li></ul><h3 id="常用语法"><a href="#常用语法" class="headerlink" title="常用语法"></a>常用语法</h3><ul><li>标题 ：根据 # 的数量显示几级标题（1～6）</li><li>引用 ：根据 > 的数量显示几级引用文本</li><li>转义 ：使用 \ 显示文本中的一些字符</li><li>强调 ：使用 * 或 _ 显示 斜体、粗体、粗斜体（1～3），~~ 显示删除</li><li>链接 ：行内式 [名字](地址 “描述”)，参考式 [名字][网址变量]</li><li>列表 ：无序列表使用 -、+ 或 *，有序列表则使用数字加 .</li><li>代码 ：行内代码使用 `，代码块则使用 4个空格 或 ```</li><li>表格 ：- 和 | 分割行和列，: 控制对其方式</li><li>图片 ：链接方法前面加 !</li></ul><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">*斜体文本*  _斜体文本_  **粗体文本**  __粗体文本__  ***粗斜体文本***  ___粗斜体文本___</span><br><span class="line">~~删除一段文本~~</span><br><span class="line"></span><br><span class="line">> 动物</span><br><span class="line">>> 水生动物</span><br><span class="line"></span><br><span class="line">[my blog](https://chuanggefighting.github.io/)   </span><br><span class="line">[Google][1] and [Baidu][2]</span><br><span class="line"></span><br><span class="line">[1]: http://google.com/   "Google" </span><br><span class="line">[2]: http://baidu.com/    "Baidu"</span><br><span class="line"></span><br><span class="line">Python</span><br><span class="line">#!/usr/bin/env python</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">print 'Hello World!</span><br></pre></td></tr></tbody></table></figure><p><em>斜体文本</em> <em>斜体文本</em> <strong>粗体文本</strong> <strong>粗体文本</strong> <strong><em>粗斜体文本</em></strong> <strong><em>粗斜体文本</em></strong><br><del>删除一段文本</del></p><blockquote><p>动物</p><blockquote><p>水生动物</p></blockquote></blockquote><p><a href="https://chuanggefighting.github.io/">my blog</a><br><a href="http://google.com/" title="Google" rel="external nofollow noopener noreferrer" target="_blank">Google</a>  and  <a href="http://baidu.com/" title="Baidu" rel="external nofollow noopener noreferrer" target="_blank">Baidu</a></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">'Hello World!</span></span><br></pre></td></tr></tbody></table></figure><h3 id="次常用语法"><a href="#次常用语法" class="headerlink" title="次常用语法"></a>次常用语法</h3><ul><li>分段：两个空格</li><li>分隔线 ：在一行中使用三个以上的 *、-、_</li><li>换行：两个空格 + 回车 （引用中换行省略回车）</li><li>首行缩进：使用转义字符代替空格，或者使用html标签</li><li>脚注 ：使用 [^name] 定义，用来解释专业词汇等</li></ul><h3 id="内嵌Html标签"><a href="#内嵌Html标签" class="headerlink" title="内嵌Html标签"></a>内嵌Html标签</h3><div style="text-indent:2em">Markdown本身不支持修改字体、字号与颜色等功能，但是可以通过内嵌Html标签使普通文本内容具有一定的格式，常用如下：</div><ul><li><font face="微软雅黑" color="red" size="3">字体及字体颜色和大小</font></li><li>换行<br></li><li><u>下划线文本</u></li><li><span align="left">文本对齐</span></li><li><span style="text-indent:2em">首行缩进</span></li></ul><hr><h2 id="图片引用方式"><a href="#图片引用方式" class="headerlink" title="图片引用方式"></a>图片引用方式</h2><div align="center"><br><img src="/images/post/snow.jpg" alt="snow" title="snow scane"><br><br></div><h3 id="本地引用"><a href="#本地引用" class="headerlink" title="本地引用"></a>本地引用</h3><ul><li><strong>绝对路径</strong><div style="text-indent:2em">将图片统一放在主题目录下 source/images 文件夹中，通过markdown语法访问它们，如 <code>![](/images/icon.jpg)</code>。这些图片既可以在首页内容中访问到，也可以在文章正文中访问到。</div></li></ul><ul><li><strong>相对路径</strong><br><div style="text-indent:2em">将图片放在文章目录中。首先配置博客根目录下的_config.yml来生成文章目录 ： <code>post_asset_folder: true</code>，然后执行命令 $ hexo new title，在 source/_posts 中会生成文章 title.md 和同名文件夹 title。</div><br><div style="text-indent:2em">我们只需将待添加的图片放进title文件夹中，然后在文章中通过 Markdown 语法进行引用即可，如 <code>![示例图片](example.jpg "示例图片") 添加图片</code>。但这些图片却无法在首页中正常显示，如果希望图片在文章和首页中同时显示，可以使用标签插件语法 ：<figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">{% asset_img example.jpg This is an image %}</span><br></pre></td></tr></tbody></table></figure></div></li></ul><h3 id="CDN引用"><a href="#CDN引用" class="headerlink" title="CDN引用"></a>CDN引用</h3><div style="text-indent:2em;margin-bottom:20px">除了在本地存储图片，还可以将图片上传到一些免费的CDN服务中。因国内访问github速度较慢，所以将图片放到国内图床上，然后引用外链是常用的方法。</div><blockquote><p>图床，也就是专门提供存储图片的地方，我们只要通过图床提供的 API 接口，把图片上传上去，就可以通过外链访问了，根本不用操心图片是怎么存的，硬盘空间不够了，硬盘坏了，访问速度比较慢等等问题，这些图床都会帮我们搞定，他们会用各种技术帮我们做图片相关的优化和服务，比如多机互备、CDN 加速、图片处理、图片鉴黄、文本识别等等。</p></blockquote><blockquote><p>当然，图床也是有缺点的，当所有人都把图片存在同一个图床上，万一有一天图床真挂了，那所有图片就都无法访问了，虽然这种情况的概率很低，但并不等于不会发生。</p></blockquote><blockquote><p>目前图床可以分为两种，一种是公共图床，一种是自建图床。公共图床也就是利用公共服务的图片上传接口，来提供图片外链的服务，比如新浪微博。自建图床，也就是利用各大云服务商提供的存储空间或者自己在 VPS 上使用开源软件来搭建图床，存储图片，生成外链提供访问，比如七牛、Lychee 开源自建图床方案。</p></blockquote><ol><li>微博图床（Chrome浏览器有个“新浪微博图床”插件，可以自动生成markdown链接）简单方便</li><li>七牛：需要注册且实名认证等太麻烦，放弃</li><li>腾讯云等云存储服务，需要先将照片放到云盘，然后找到超链接，然后粘贴到文章。太麻烦，放弃。</li><li>ipic 工具【强烈推荐】，支持监控剪贴板，一键上传到微博图床，免费版默认是微博图床，支持七牛云等，下载地址：<a href="https://itunes.apple.com/cn/app/id1101244278?mt=12" rel="external nofollow noopener noreferrer" target="_blank">https://itunes.apple.com/cn/app/id1101244278?mt=12</a></li></ol><h3 id="使用github存储博客图片"><a href="#使用github存储博客图片" class="headerlink" title="使用github存储博客图片"></a>使用github存储博客图片</h3><ol><li>在 blog/source/ 下创建img文件，将图片放入。</li><li>更新博客仓库，执行 hexo g -d</li><li>在github仓库中找到图片位置，点击download，复制浏览器的链接，即为图片的链接</li><li>将链接插入文章</li></ol><!-- rebuild by neat --></body></html>]]></content>
    
    <summary type="html">
    
      Hexo -- 快速、简洁且高效的博客框架
    
    </summary>
    
      <category term="Hexo Blog" scheme="https://chuanggefighting.github.io/categories/Hexo-Blog/"/>
    
    
      <category term="Hexo" scheme="https://chuanggefighting.github.io/tags/Hexo/"/>
    
  </entry>
  
</feed>
